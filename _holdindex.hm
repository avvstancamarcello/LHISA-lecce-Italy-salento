<!DOCTYPE html>
<html lang="it">
<head>
<meta charset="utf-8"/>
<title>LHISA NFT | Lecce Historical Building</title>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<!-- Bootstrap CSS for improved styling -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/ethers@6.10.0/dist/ethers.umd.min.js"></script>
<script src="https://unpkg.com/@metamask/sdk/dist/metamask-sdk.umd.js"></script>
<script src="abi.js"></script>
<style>
        body {
            font-family: Arial, sans-serif;
            background: #f7f7f7;
        }
        .container {
            max-width: 1200px;
        }
        header {
            text-align: center;
            padding: 20px 0;
        }
        .nft-preview-section {
            margin-top: 20px;
        }
        .nft-item {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
            padding: 15px;
            margin-bottom: 15px;
            text-align: center;
        }
        .nft-item img {
            max-width: 100%;
            height: 350px;
            object-fit: cover;
            border-radius: 4px;
            border: 2px solid #aaa;
        }
        .nft-grid {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-top: 20px;
        }
        .nft-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
            width: 200px;
            margin: 10px;
            padding: 10px;
            text-align: center;
        }
        .nft-card img {
            max-width: 100%;
            height: auto;
            border-radius: 4px;
        }
        #log {
            background: #fff;
            padding: 15px;
            border-radius: 6px;
            margin-top: 20px;
            white-space: pre-wrap;
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #ddd;
        }
        .log-entry {
            margin-bottom: 8px;
            padding: 5px;
            border-radius: 3px;
        }
        .log-error {
            color: #dc3545;
            background-color: #f8d7da;
        }
        .log-success {
            color: #155724;
            background-color: #d4edda;
        }
        .log-info {
            color: #0c5460;
            background-color: #d1ecf1;
        }
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }
        .language-switcher {
            position: fixed;
            top: 10px;
            right: 10px;
            z-index: 1000;
        }
        .building-images {
            display: flex;
            gap: 10px;
            margin-top: 20px;
            flex-wrap: wrap;
            justify-content: center;
        }
        .building-images img {
            height: 200px;
            object-fit: cover;
            border: 2px solid #ccc;
            border-radius: 8px;
        }
    </style>
</head>
<body>
<!-- Language switcher -->
<div class="language-switcher">
    <button id="lang-it" class="btn btn-sm btn-outline-primary" onclick="setLanguage('it')">üáÆüáπ IT</button>
    <button id="lang-en" class="btn btn-sm btn-outline-primary" onclick="setLanguage('en')">üá¨üáß EN</button>
</div>

<div class="container">
<header>
<h1 data-translate="title">LHISA NFT ‚Äì Lecce Scientific Smart Asset</h1>
<p>
    üîé <a href="https://www.google.com/maps/place/LHI+HEALTHY+HUB/@40.3320047,18.1613206,3a,75y,90t/data=!3m8!1e2!3m6!1shttps:%2F%2Fimages.trvl-media.com%2Flodging%2F113000000%2F112930000%2F112928700%2F112928681%2Fee2855ab_z.jpg!2e7!3e27!6shttps:%2F%2Flh3.googleusercontent.com%2Fgps-proxy%2FALd4DhF-dXaxC9wKd6uJHPxdWL6vw_X3XmLpxRMoSbGJ5CXiAaPOiD1ec4Ny9QV3kNHK4ROP9b9-82bWdRnEqKvaEJZyntSHWbzuBQJRjXD218BY6r94S5iwa8M55cP6zVNvqhInjbGawKNeBGDaPCTOr_PozblIctnFUyJa186qtE-zgmmCw21K_TUn%3Dw203-h135-k-no!7i1000!8i667!4m10!3m9!1s0x13442fc918b6d029:0x8ec95204297a6e3!5m2!4m1!1i2!8m2!3d40.3318171!4d18.1616302!10e5!16s%2Fg%2F11px8gr_q0?entry=ttu&amp;g_ep=EgoyMDI1MDYzMC4wIKXMDSoASAFQAw%3D%3D" target="_blank" data-translate="explore_maps">Esplora il Medical Hotel con Google Maps</a>
</p>

<div class="building-images">
    <img alt="edificio3" src="images/edificio3.png"/>
    <img alt="edificio2" src="images/edificio2.png"/>
    <img alt="edificio1" src="images/edificio1.png"/>
    <img alt="collage" src="images/collage.jpg"/>
</div>

<div class="mt-4">
    <h3 data-translate="project_title">Progetto NFT su edificio storico a Lecce</h3>
    <p>
        <a href="https://lhilecce.it" target="_blank">Visita lhilecce.it</a> |
        <a href="https://www.booking.com/hotel/it/lhi-healthy-hub.html" target="_blank" data-translate="booking_link">Prenota su Booking</a>
    </p>
    <img alt="Bandiera edificio storico" src="images/banner.png" class="img-fluid"/>
    <div class="mt-3">
        <button id="connect-btn" class="btn btn-primary btn-lg" data-translate="connect_wallet">üîê Connetti Wallet MetaMask</button>
        <div id="wallet-status" class="mt-2"></div>
    </div>
</div>
</header>

<section class="nft-preview-section">
<h2 data-translate="nft_preview_title">ü™ô NFT Monete - Preview</h2>

<!-- NFT Preview cards with existing images -->
<div class="row" id="nft-preview-container">
    <!-- NFT items will be generated dynamically -->
</div>
</section>

<section class="nft-grid" id="nft-grid-section">
<!-- Grid cards will be preserved as they are -->
<div class="nft-card">
<img alt="NFT 5" src="images/05.jpg"/>
<p data-translate="token_id">Token ID: 5</p>
<button class="btn btn-success" onclick="mintToken(5)" data-translate="mint_token">Mint Token 5</button>
</div>
<div class="nft-card">
<img alt="NFT 10" src="images/10.jpg"/>
<p data-translate="token_id">Token ID: 10</p>
<button class="btn btn-success" onclick="mintToken(10)" data-translate="mint_token">Mint Token 10</button>
</div>
<div class="nft-card">
<img alt="NFT 15" src="images/15.jpg"/>
<p data-translate="token_id">Token ID: 15</p>
<button class="btn btn-success" onclick="mintToken(15)" data-translate="mint_token">Mint Token 15</button>
</div>
<div class="nft-card">
<img alt="NFT 20" src="images/20.jpg"/>
<p data-translate="token_id">Token ID: 20</p>
<button class="btn btn-success" onclick="mintToken(20)" data-translate="mint_token">Mint Token 20</button>
</div>
<div class="nft-card">
<img alt="NFT 25" src="images/25.jpg"/>
<p data-translate="token_id">Token ID: 25</p>
<button class="btn btn-success" onclick="mintToken(25)" data-translate="mint_token">Mint Token 25</button>
</div>
<div class="nft-card">
<img alt="NFT 30" src="images/30.jpg"/>
<p data-translate="token_id">Token ID: 30</p>
<button class="btn btn-success" onclick="mintToken(30)" data-translate="mint_token">Mint Token 30</button>
</div>
<div class="nft-card">
<img alt="NFT 35" src="images/35.jpg"/>
<p data-translate="token_id">Token ID: 35</p>
<button class="btn btn-success" onclick="mintToken(35)" data-translate="mint_token">Mint Token 35</button>
</div>
<div class="nft-card">
<img alt="NFT 40" src="images/40.jpg"/>
<p data-translate="token_id">Token ID: 40</p>
<button class="btn btn-success" onclick="mintToken(40)" data-translate="mint_token">Mint Token 40</button>
</div>
<div class="nft-card">
<img alt="NFT 45" src="images/45.jpg"/>
<p data-translate="token_id">Token ID: 45</p>
<button class="btn btn-success" onclick="mintToken(45)" data-translate="mint_token">Mint Token 45</button>
</div>
<div class="nft-card">
<img alt="NFT 50" src="images/50.jpg"/>
<p data-translate="token_id">Token ID: 50</p>
<button class="btn btn-success" onclick="mintToken(50)" data-translate="mint_token">Mint Token 50</button>
</div>
<div class="nft-card">
<img alt="NFT 55" src="images/55.jpg"/>
<p data-translate="token_id">Token ID: 55</p>
<button class="btn btn-success" onclick="mintToken(55)" data-translate="mint_token">Mint Token 55</button>
</div>
<div class="nft-card">
<img alt="NFT 60" src="images/60.jpg"/>
<p data-translate="token_id">Token ID: 60</p>
<button class="btn btn-success" onclick="mintToken(60)" data-translate="mint_token">Mint Token 60</button>
</div>
<div class="nft-card">
<img alt="NFT 65" src="images/65.jpg"/>
<p data-translate="token_id">Token ID: 65</p>
<button class="btn btn-success" onclick="mintToken(65)" data-translate="mint_token">Mint Token 65</button>
</div>
<div class="nft-card">
<img alt="NFT 70" src="images/70.jpg"/>
<p data-translate="token_id">Token ID: 70</p>
<button class="btn btn-success" onclick="mintToken(70)" data-translate="mint_token">Mint Token 70</button>
</div>
<div class="nft-card">
<img alt="NFT 75" src="images/75.jpg"/>
<p data-translate="token_id">Token ID: 75</p>
<button class="btn btn-success" onclick="mintToken(75)" data-translate="mint_token">Mint Token 75</button>
</div>
<div class="nft-card">
<img alt="NFT 80" src="images/80.jpg"/>
<p data-translate="token_id">Token ID: 80</p>
<button class="btn btn-success" onclick="mintToken(80)" data-translate="mint_token">Mint Token 80</button>
</div>
<div class="nft-card">
<img alt="NFT 85" src="images/85.jpg"/>
<p data-translate="token_id">Token ID: 85</p>
<button class="btn btn-success" onclick="mintToken(85)" data-translate="mint_token">Mint Token 85</button>
</div>
<div class="nft-card">
<img alt="NFT 90" src="images/90.jpg"/>
<p data-translate="token_id">Token ID: 90</p>
<button class="btn btn-success" onclick="mintToken(90)" data-translate="mint_token">Mint Token 90</button>
</div>
<div class="nft-card">
<img alt="NFT 95" src="images/95.jpg"/>
<p data-translate="token_id">Token ID: 95</p>
<button class="btn btn-success" onclick="mintToken(95)" data-translate="mint_token">Mint Token 95</button>
</div>
<div class="nft-card">
<img alt="NFT 100" src="images/100.jpg"/>
<p data-translate="token_id">Token ID: 100</p>
<button class="btn btn-success" onclick="mintToken(100)" data-translate="mint_token">Mint Token 100</button>
</div>
</section>

<div id="log" class="mb-4">
    <strong data-translate="log_title">Log:</strong>
    <div id="log-content"></div>
</div>
</div>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
        // Internationalization object
        const translations = {
            it: {
                title: "LHISA NFT ‚Äì Lecce Historical Smart Asset",
                explore_maps: "Esplora il Medical Hotel con Google Maps", 
                project_title: "Progetto NFT su edificio storico a Lecce",
                booking_link: "Prenota su Booking",
                connect_wallet: "üîê Connetti Wallet MetaMask",
                nft_preview_title: "ü™ô NFT Monete - Preview",
                token_id: "Token ID:",
                mint_token: "Mint Token",
                log_title: "Log:",
                connecting: "‚è≥ Connessione in corso...",
                wallet_connected: "‚úÖ Wallet connesso:",
                connection_error: "‚ùå Errore durante la connessione:",
                mint_starting: "‚è≥ Avvio Mint per Token ID",
                mint_in_progress: "üìù Mint in corso per token",
                mint_completed: "‚úÖ Mint completato per token",
                mint_error: "‚ùå Errore durante il mint:",
                wallet_required: "‚ö†Ô∏è Devi connettere prima il wallet!",
                view_on_polygonscan: "üìã Visualizza su Polygonscan",
                wallet_not_connected: "‚ùå Wallet non connesso"
            },
            en: {
                title: "LHISA NFT ‚Äì Lecce Historical Smart Asset",
                explore_maps: "Explore the Medical Hotel on Google Maps",
                project_title: "NFT Project on Historic Building in Lecce",
                booking_link: "Book on Booking",
                connect_wallet: "üîê Connect MetaMask Wallet",
                nft_preview_title: "ü™ô NFT Coins - Preview",
                token_id: "Token ID:",
                mint_token: "Mint Token",
                log_title: "Log:",
                connecting: "‚è≥ Connecting...",
                wallet_connected: "‚úÖ Wallet connected:",
                connection_error: "‚ùå Connection error:",
                mint_starting: "‚è≥ Starting Mint for Token ID",
                mint_in_progress: "üìù Minting token",
                mint_completed: "‚úÖ Mint completed for token",
                mint_error: "‚ùå Mint error:",
                wallet_required: "‚ö†Ô∏è You must connect your wallet first!",
                view_on_polygonscan: "üìã View on Polygonscan",
                wallet_not_connected: "‚ùå Wallet not connected"
            }
        };

        let currentLanguage = 'it';

        // Language switching function
        function setLanguage(lang) {
            currentLanguage = lang;
            document.documentElement.lang = lang;
            
            // Update all translatable elements
            document.querySelectorAll('[data-translate]').forEach(element => {
                const key = element.getAttribute('data-translate');
                if (translations[lang] && translations[lang][key]) {
                    element.textContent = translations[lang][key];
                }
            });

            // Update language buttons
            document.getElementById('lang-it').classList.toggle('btn-primary', lang === 'it');
            document.getElementById('lang-it').classList.toggle('btn-outline-primary', lang !== 'it');
            document.getElementById('lang-en').classList.toggle('btn-primary', lang === 'en');
            document.getElementById('lang-en').classList.toggle('btn-outline-primary', lang !== 'en');
        }

        // Translation helper function
        function t(key) {
            return translations[currentLanguage][key] || key;
        }

        const clientID = "BPOZFh3Z8-D35OCK2tAPyeybjWmNA_GAlJ2pw-MSxZlDcMeit73G0PXEVE-EF9GWrX7DSpxktOulSTEuh4cR0fs";
        const infuraUrl = "https://polygon-mainnet.infura.io/v3/c690c86b64b74bd5a69ad2d32cf2a0c6";

        const MMSDK = new MetaMaskSDK.MetaMaskSDK({
            dappMetadata: {
                name: "LHISA NFT",
                url: "https://lhilecce.it"
            },
            infura: {
                projectId: "c690c86b64b74bd5a69ad2d32cf2a0c6"
            },
            embeddedWallet: {
                enabled: true,
                clientId: clientID
            }
        });

        const ethereum = MMSDK.getProvider();
        let signer, contractInstance;
        const contractAddress = "0x2A4974aaDFFcFbe721A0B9f41059f6D62fdaface";
        let abi;

        // Wait for ABI to be loaded from abi.js
        function waitForABI() {
            return new Promise((resolve, reject) => {
                if (window.contractABI) {
                    resolve(window.contractABI);
                } else {
                    // Try to find the ABI script tag by src (adjust if needed)
                    const scripts = document.getElementsByTagName('script');
                    let abiScript = null;
                    for (let i = 0; i < scripts.length; i++) {
                        if (scripts[i].src && scripts[i].src.includes('abi.js')) {
                            abiScript = scripts[i];
                            break;
                        }
                    }
                    if (abiScript) {
                        abiScript.addEventListener('load', () => {
                            if (window.contractABI) {
                                resolve(window.contractABI);
                            } else {
                                reject(new Error('ABI script loaded but contractABI not found'));
                            }
                        });
                    } else {
                        reject(new Error('ABI script tag not found'));
                    }
                }
            });
        }

        async function connectEmbeddedWallet() {
            try {
                updateWalletStatus(t('connecting'), 'info');
                const connectBtn = document.getElementById("connect-btn");
                connectBtn.classList.add('loading');
                connectBtn.disabled = true;
                connectBtn.textContent = '‚è≥ ' + t('connecting');
                
                const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
                const provider = new ethers.BrowserProvider(ethereum);
                signer = await provider.getSigner();
                
                // Wait for ABI to be loaded
                abi = await waitForABI();
                contractInstance = new ethers.Contract(contractAddress, abi, signer);
                
                updateWalletStatus(`${t('wallet_connected')} ${accounts[0].substring(0, 8)}...${accounts[0].substring(34)}`, 'success');
                log(`${t('wallet_connected')} ${accounts[0]}`, 'success');
                
                connectBtn.textContent = '‚úÖ ' + t('wallet_connected').replace('‚úÖ ', '');
                connectBtn.classList.remove('loading');
                connectBtn.disabled = true; // Keep disabled when connected
            } catch (err) {
                console.error(err);
                updateWalletStatus(t('connection_error'), 'error');
                log(`${t('connection_error')} ${err.message}`, 'error');
                
                const connectBtn = document.getElementById("connect-btn");
                connectBtn.classList.remove('loading');
                connectBtn.disabled = false;
                connectBtn.textContent = 'üîê ' + t('connect_wallet').replace('üîê ', '');
            }
        }

        function updateWalletStatus(message, type) {
            const statusEl = document.getElementById("wallet-status");
            statusEl.textContent = message;
            statusEl.className = `mt-2 alert alert-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'}`;
        }

        async function mintToken(tokenId) {
            try {
                if (!contractInstance) {
                    log(t('wallet_required'), 'error');
                    return;
                }
                
                // Disable all mint buttons during operation
                const mintButtons = document.querySelectorAll('button[onclick*="mintToken"]');
                mintButtons.forEach(btn => {
                    btn.disabled = true;
                    btn.classList.add('loading');
                });
                
                log(`${t('mint_starting')} ${tokenId}...`, 'info');
                
                // Get the price from the contract
                const priceInWei = await contractInstance.pricesInWei(tokenId);
                log(`üí∞ Price for Token ${tokenId}: ${ethers.formatEther(priceInWei)} MATIC`, 'info');
                
                // Use mintNFT function with correct price from contract
                const tx = await contractInstance.mintNFT(tokenId, 1, { value: priceInWei });
                log(`${t('mint_in_progress')} ${tokenId}... TX: ${tx.hash}`, 'info');
                
                // Add clickable Polygonscan link
                const polygonscanLink = `https://polygonscan.com/tx/${tx.hash}`;
                logWithLink(`üìù ${t('mint_in_progress')} ${tokenId}`, polygonscanLink, t('view_on_polygonscan'), 'info');
                
                await tx.wait();
                log(`${t('mint_completed')} ${tokenId}!`, 'success');
                logWithLink(`‚úÖ ${t('mint_completed')} ${tokenId}`, polygonscanLink, t('view_on_polygonscan'), 'success');
                
            } catch (err) {
                console.error(err);
                log(`${t('mint_error')} ${err.message}`, 'error');
            } finally {
                // Re-enable all mint buttons
                const mintButtons = document.querySelectorAll('button[onclick*="mintToken"]');
                mintButtons.forEach(btn => {
                    btn.disabled = false;
                    btn.classList.remove('loading');
                });
            }
        }

        function log(message, type = 'info') {
            const logContent = document.getElementById("log-content");
            const entry = document.createElement("div");
            entry.className = `log-entry log-${type}`;
            entry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
            logContent.appendChild(entry);
            logContent.scrollTop = logContent.scrollHeight;
        }

        function logWithLink(message, link, linkText, type = 'info') {
            const logContent = document.getElementById("log-content");
            const entry = document.createElement("div");
            entry.className = `log-entry log-${type}`;
            // Safely construct the log entry with a link
            const time = `[${new Date().toLocaleTimeString()}] `;
            const textNode = document.createTextNode(time + message + " ");
            const a = document.createElement("a");
            a.href = link;
            a.target = "_blank";
            a.className = "btn btn-sm btn-outline-primary";
            a.textContent = linkText;
            entry.appendChild(textNode);
            entry.appendChild(a);
            logContent.appendChild(entry);
            logContent.scrollTop = logContent.scrollHeight;
        }

        // Generate NFT preview items dynamically
        function generateNFTPreview() {
            const container = document.getElementById("nft-preview-container");
            const tokenIds = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
            
            tokenIds.forEach(tokenId => {
                const col = document.createElement("div");
                col.className = "col-md-4 col-lg-3 mb-4";
                
                // Map token IDs to available images (1-20 maps to available numbers)
                const imageMap = {
                    1: '05', 2: '10', 3: '15', 4: '20', 5: '25', 6: '30', 7: '35', 8: '40', 9: '45', 10: '50',
                    11: '55', 12: '60', 13: '65', 14: '70', 15: '75', 16: '80', 17: '85', 18: '90', 19: '95', 20: '100'
                };
                
                const imageFile = imageMap[tokenId] || '05';
                
                col.innerHTML = `
                    <div class="nft-item">
                        <img alt="NFT Preview Token ${tokenId}" src="images/${imageFile}.jpg"/>
                        <div class="mt-2"><span data-translate="token_id">Token ID</span>: ${tokenId}</div>
                        <button class="btn btn-success mt-2" onclick="mintToken(${tokenId})">
                            <span data-translate="mint_token">Mint Token</span> ${tokenId}
                        </button>
                    </div>
                `;
                
                container.appendChild(col);
            });
        }

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            generateNFTPreview();
            setLanguage('it'); // Set default language
            
            document.getElementById("connect-btn").addEventListener("click", connectEmbeddedWallet);
            
            // Initial log message
            log("LHISA NFT - Lecce Historical Smart Asset", 'info');
            
            if (!window.contractABI) {
                log("‚è≥ Caricamento ABI del contratto...", 'info');
            }
        });
    </script>
</body>
</html>
